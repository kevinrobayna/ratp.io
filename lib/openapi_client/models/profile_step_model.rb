=begin
#RAPT API

#Really Awesome Product Technology

The version of the OpenAPI document: v1
Contact: beer@kegland.com.au
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module OpenapiClient
  class ProfileStepModel
    attr_accessor :id

    attr_accessor :deleted

    attr_accessor :created_on

    attr_accessor :created_by

    attr_accessor :modified_on

    attr_accessor :modified_by

    attr_accessor :name

    attr_accessor :order

    attr_accessor :control_type

    attr_accessor :end_type

    attr_accessor :duration_type

    attr_accessor :operator

    attr_accessor :length

    attr_accessor :temperature

    attr_accessor :min_temperature

    attr_accessor :max_temperature

    attr_accessor :gravity

    attr_accessor :pump_enabled

    attr_accessor :pump_utilisation

    attr_accessor :heating_utilisation

    attr_accessor :pid_enabled

    attr_accessor :sensor_differential

    attr_accessor :profile_id

    attr_accessor :alerts

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'deleted' => :'deleted',
        :'created_on' => :'createdOn',
        :'created_by' => :'createdBy',
        :'modified_on' => :'modifiedOn',
        :'modified_by' => :'modifiedBy',
        :'name' => :'name',
        :'order' => :'order',
        :'control_type' => :'controlType',
        :'end_type' => :'endType',
        :'duration_type' => :'durationType',
        :'operator' => :'operator',
        :'length' => :'length',
        :'temperature' => :'temperature',
        :'min_temperature' => :'minTemperature',
        :'max_temperature' => :'maxTemperature',
        :'gravity' => :'gravity',
        :'pump_enabled' => :'pumpEnabled',
        :'pump_utilisation' => :'pumpUtilisation',
        :'heating_utilisation' => :'heatingUtilisation',
        :'pid_enabled' => :'pidEnabled',
        :'sensor_differential' => :'sensorDifferential',
        :'profile_id' => :'profileId',
        :'alerts' => :'alerts'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'deleted' => :'Boolean',
        :'created_on' => :'Time',
        :'created_by' => :'String',
        :'modified_on' => :'Time',
        :'modified_by' => :'String',
        :'name' => :'String',
        :'order' => :'Integer',
        :'control_type' => :'ProfileStepControlTypes',
        :'end_type' => :'ProfileStepEndTypes',
        :'duration_type' => :'ProfileStepDurationTypes',
        :'operator' => :'ProfileValueOperators',
        :'length' => :'Integer',
        :'temperature' => :'Float',
        :'min_temperature' => :'Float',
        :'max_temperature' => :'Float',
        :'gravity' => :'Float',
        :'pump_enabled' => :'Boolean',
        :'pump_utilisation' => :'Float',
        :'heating_utilisation' => :'Float',
        :'pid_enabled' => :'Boolean',
        :'sensor_differential' => :'Float',
        :'profile_id' => :'String',
        :'alerts' => :'Array<ProfileStepAlertModel>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'name',
        :'length',
        :'temperature',
        :'min_temperature',
        :'max_temperature',
        :'gravity',
        :'pump_enabled',
        :'pump_utilisation',
        :'heating_utilisation',
        :'pid_enabled',
        :'sensor_differential',
        :'alerts'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ProfileStepModel` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ProfileStepModel`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'deleted')
        self.deleted = attributes[:'deleted']
      end

      if attributes.key?(:'created_on')
        self.created_on = attributes[:'created_on']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'modified_on')
        self.modified_on = attributes[:'modified_on']
      end

      if attributes.key?(:'modified_by')
        self.modified_by = attributes[:'modified_by']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'order')
        self.order = attributes[:'order']
      end

      if attributes.key?(:'control_type')
        self.control_type = attributes[:'control_type']
      end

      if attributes.key?(:'end_type')
        self.end_type = attributes[:'end_type']
      end

      if attributes.key?(:'duration_type')
        self.duration_type = attributes[:'duration_type']
      end

      if attributes.key?(:'operator')
        self.operator = attributes[:'operator']
      end

      if attributes.key?(:'length')
        self.length = attributes[:'length']
      end

      if attributes.key?(:'temperature')
        self.temperature = attributes[:'temperature']
      end

      if attributes.key?(:'min_temperature')
        self.min_temperature = attributes[:'min_temperature']
      end

      if attributes.key?(:'max_temperature')
        self.max_temperature = attributes[:'max_temperature']
      end

      if attributes.key?(:'gravity')
        self.gravity = attributes[:'gravity']
      end

      if attributes.key?(:'pump_enabled')
        self.pump_enabled = attributes[:'pump_enabled']
      end

      if attributes.key?(:'pump_utilisation')
        self.pump_utilisation = attributes[:'pump_utilisation']
      end

      if attributes.key?(:'heating_utilisation')
        self.heating_utilisation = attributes[:'heating_utilisation']
      end

      if attributes.key?(:'pid_enabled')
        self.pid_enabled = attributes[:'pid_enabled']
      end

      if attributes.key?(:'sensor_differential')
        self.sensor_differential = attributes[:'sensor_differential']
      end

      if attributes.key?(:'profile_id')
        self.profile_id = attributes[:'profile_id']
      end

      if attributes.key?(:'alerts')
        if (value = attributes[:'alerts']).is_a?(Array)
          self.alerts = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          deleted == o.deleted &&
          created_on == o.created_on &&
          created_by == o.created_by &&
          modified_on == o.modified_on &&
          modified_by == o.modified_by &&
          name == o.name &&
          order == o.order &&
          control_type == o.control_type &&
          end_type == o.end_type &&
          duration_type == o.duration_type &&
          operator == o.operator &&
          length == o.length &&
          temperature == o.temperature &&
          min_temperature == o.min_temperature &&
          max_temperature == o.max_temperature &&
          gravity == o.gravity &&
          pump_enabled == o.pump_enabled &&
          pump_utilisation == o.pump_utilisation &&
          heating_utilisation == o.heating_utilisation &&
          pid_enabled == o.pid_enabled &&
          sensor_differential == o.sensor_differential &&
          profile_id == o.profile_id &&
          alerts == o.alerts
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, deleted, created_on, created_by, modified_on, modified_by, name, order, control_type, end_type, duration_type, operator, length, temperature, min_temperature, max_temperature, gravity, pump_enabled, pump_utilisation, heating_utilisation, pid_enabled, sensor_differential, profile_id, alerts].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
