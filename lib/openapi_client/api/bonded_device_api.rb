=begin
#RAPT API

#Really Awesome Product Technology

The version of the OpenAPI document: v1
Contact: beer@kegland.com.au
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module OpenapiClient
  class BondedDeviceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bonded_device_id 
    # @return [BondedDeviceModel]
    def api_bonded_devices_get_bonded_device_get(opts = {})
      data, _status_code, _headers = api_bonded_devices_get_bonded_device_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :bonded_device_id 
    # @return [Array<(BondedDeviceModel, Integer, Hash)>] BondedDeviceModel data, response status code and response headers
    def api_bonded_devices_get_bonded_device_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BondedDeviceApi.api_bonded_devices_get_bonded_device_get ...'
      end
      # resource path
      local_var_path = '/api/BondedDevices/GetBondedDevice'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'bondedDeviceId'] = opts[:'bonded_device_id'] if !opts[:'bonded_device_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BondedDeviceModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"BondedDeviceApi.api_bonded_devices_get_bonded_device_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BondedDeviceApi#api_bonded_devices_get_bonded_device_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<BondedDeviceModel>]
    def api_bonded_devices_get_bonded_devices_get(opts = {})
      data, _status_code, _headers = api_bonded_devices_get_bonded_devices_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BondedDeviceModel>, Integer, Hash)>] Array<BondedDeviceModel> data, response status code and response headers
    def api_bonded_devices_get_bonded_devices_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BondedDeviceApi.api_bonded_devices_get_bonded_devices_get ...'
      end
      # resource path
      local_var_path = '/api/BondedDevices/GetBondedDevices'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BondedDeviceModel>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"BondedDeviceApi.api_bonded_devices_get_bonded_devices_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BondedDeviceApi#api_bonded_devices_get_bonded_devices_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :bonded_device_id 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @return [Array<BondedDeviceTelemetryModel>]
    def api_bonded_devices_get_telemetry_get(opts = {})
      data, _status_code, _headers = api_bonded_devices_get_telemetry_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :bonded_device_id 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @return [Array<(Array<BondedDeviceTelemetryModel>, Integer, Hash)>] Array<BondedDeviceTelemetryModel> data, response status code and response headers
    def api_bonded_devices_get_telemetry_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BondedDeviceApi.api_bonded_devices_get_telemetry_get ...'
      end
      # resource path
      local_var_path = '/api/BondedDevices/GetTelemetry'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'bondedDeviceId'] = opts[:'bonded_device_id'] if !opts[:'bonded_device_id'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BondedDeviceTelemetryModel>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"BondedDeviceApi.api_bonded_devices_get_telemetry_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BondedDeviceApi#api_bonded_devices_get_telemetry_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
