=begin
#RAPT API

#Really Awesome Product Technology

The version of the OpenAPI document: v1
Contact: beer@kegland.com.au
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module OpenapiClient
  class ProfileSessionModel
    attr_accessor :id

    attr_accessor :deleted

    attr_accessor :created_on

    attr_accessor :created_by

    attr_accessor :modified_on

    attr_accessor :modified_by

    attr_accessor :name

    attr_accessor :profile_id

    attr_accessor :profile

    attr_accessor :fermentation_chamber_id

    attr_accessor :hydrometer_id

    attr_accessor :temperature_controller_id

    attr_accessor :brew_zilla_id

    attr_accessor :start_date

    attr_accessor :end_date

    attr_accessor :original_gravity

    attr_accessor :final_gravity

    attr_accessor :sent_alerts

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'deleted' => :'deleted',
        :'created_on' => :'createdOn',
        :'created_by' => :'createdBy',
        :'modified_on' => :'modifiedOn',
        :'modified_by' => :'modifiedBy',
        :'name' => :'name',
        :'profile_id' => :'profileId',
        :'profile' => :'profile',
        :'fermentation_chamber_id' => :'fermentationChamberId',
        :'hydrometer_id' => :'hydrometerId',
        :'temperature_controller_id' => :'temperatureControllerId',
        :'brew_zilla_id' => :'brewZillaId',
        :'start_date' => :'startDate',
        :'end_date' => :'endDate',
        :'original_gravity' => :'originalGravity',
        :'final_gravity' => :'finalGravity',
        :'sent_alerts' => :'sentAlerts'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'deleted' => :'Boolean',
        :'created_on' => :'Time',
        :'created_by' => :'String',
        :'modified_on' => :'Time',
        :'modified_by' => :'String',
        :'name' => :'String',
        :'profile_id' => :'String',
        :'profile' => :'ProfileModel',
        :'fermentation_chamber_id' => :'String',
        :'hydrometer_id' => :'String',
        :'temperature_controller_id' => :'String',
        :'brew_zilla_id' => :'String',
        :'start_date' => :'Time',
        :'end_date' => :'Time',
        :'original_gravity' => :'Float',
        :'final_gravity' => :'Float',
        :'sent_alerts' => :'Array<ProfileAlertModel>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'name',
        :'profile_id',
        :'fermentation_chamber_id',
        :'hydrometer_id',
        :'temperature_controller_id',
        :'brew_zilla_id',
        :'start_date',
        :'end_date',
        :'original_gravity',
        :'final_gravity',
        :'sent_alerts'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ProfileSessionModel` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ProfileSessionModel`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'deleted')
        self.deleted = attributes[:'deleted']
      end

      if attributes.key?(:'created_on')
        self.created_on = attributes[:'created_on']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'modified_on')
        self.modified_on = attributes[:'modified_on']
      end

      if attributes.key?(:'modified_by')
        self.modified_by = attributes[:'modified_by']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'profile_id')
        self.profile_id = attributes[:'profile_id']
      end

      if attributes.key?(:'profile')
        self.profile = attributes[:'profile']
      end

      if attributes.key?(:'fermentation_chamber_id')
        self.fermentation_chamber_id = attributes[:'fermentation_chamber_id']
      end

      if attributes.key?(:'hydrometer_id')
        self.hydrometer_id = attributes[:'hydrometer_id']
      end

      if attributes.key?(:'temperature_controller_id')
        self.temperature_controller_id = attributes[:'temperature_controller_id']
      end

      if attributes.key?(:'brew_zilla_id')
        self.brew_zilla_id = attributes[:'brew_zilla_id']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.key?(:'original_gravity')
        self.original_gravity = attributes[:'original_gravity']
      end

      if attributes.key?(:'final_gravity')
        self.final_gravity = attributes[:'final_gravity']
      end

      if attributes.key?(:'sent_alerts')
        if (value = attributes[:'sent_alerts']).is_a?(Array)
          self.sent_alerts = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          deleted == o.deleted &&
          created_on == o.created_on &&
          created_by == o.created_by &&
          modified_on == o.modified_on &&
          modified_by == o.modified_by &&
          name == o.name &&
          profile_id == o.profile_id &&
          profile == o.profile &&
          fermentation_chamber_id == o.fermentation_chamber_id &&
          hydrometer_id == o.hydrometer_id &&
          temperature_controller_id == o.temperature_controller_id &&
          brew_zilla_id == o.brew_zilla_id &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          original_gravity == o.original_gravity &&
          final_gravity == o.final_gravity &&
          sent_alerts == o.sent_alerts
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, deleted, created_on, created_by, modified_on, modified_by, name, profile_id, profile, fermentation_chamber_id, hydrometer_id, temperature_controller_id, brew_zilla_id, start_date, end_date, original_gravity, final_gravity, sent_alerts].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
