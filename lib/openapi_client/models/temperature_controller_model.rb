=begin
#RAPT API

#Really Awesome Product Technology

The version of the OpenAPI document: v1
Contact: beer@kegland.com.au
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module OpenapiClient
  class TemperatureControllerModel
    attr_accessor :id

    attr_accessor :deleted

    attr_accessor :created_on

    attr_accessor :created_by

    attr_accessor :modified_on

    attr_accessor :modified_by

    attr_accessor :name

    attr_accessor :serial_number

    attr_accessor :mac_address

    attr_accessor :device_type

    attr_accessor :active

    attr_accessor :disabled

    attr_accessor :username

    attr_accessor :connection_state

    attr_accessor :status

    attr_accessor :error

    attr_accessor :last_activity_time

    attr_accessor :rssi

    attr_accessor :firmware_version

    attr_accessor :is_latest_firmware

    attr_accessor :active_profile_id

    attr_accessor :active_profile_step_id

    attr_accessor :active_profile_session

    attr_accessor :profile_sessions

    attr_accessor :beta_updates

    attr_accessor :bluetooth_enabled

    attr_accessor :graph_zoom_level

    attr_accessor :temperature

    attr_accessor :target_temperature

    attr_accessor :total_run_time

    attr_accessor :cooling_enabled

    attr_accessor :cooling_run_time

    attr_accessor :cooling_starts

    attr_accessor :heating_enabled

    attr_accessor :heating_run_time

    attr_accessor :heating_starts

    attr_accessor :heating_utilisation

    attr_accessor :high_temp_alarm

    attr_accessor :low_temp_alarm

    attr_accessor :ntc_beta

    attr_accessor :ntc_ref_resistance

    attr_accessor :ntc_ref_temperature

    attr_accessor :pid_cycle_time

    attr_accessor :pid_enabled

    attr_accessor :pid_proportional

    attr_accessor :pid_integral

    attr_accessor :pid_derivative

    attr_accessor :sensor_differential

    attr_accessor :sensor_timeout

    attr_accessor :show_graph

    attr_accessor :sounds_enabled

    attr_accessor :temp_unit

    attr_accessor :use_internal_sensor

    attr_accessor :control_device_type

    attr_accessor :control_device_mac_address

    attr_accessor :control_device_temperature

    attr_accessor :customer_use

    attr_accessor :telemetry_frequency

    attr_accessor :compressor_delay

    attr_accessor :mode_switch_delay

    attr_accessor :cooling_hysteresis

    attr_accessor :heating_hysteresis

    attr_accessor :telemetry

    attr_accessor :min_target_temperature

    attr_accessor :max_target_temperature

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'deleted' => :'deleted',
        :'created_on' => :'createdOn',
        :'created_by' => :'createdBy',
        :'modified_on' => :'modifiedOn',
        :'modified_by' => :'modifiedBy',
        :'name' => :'name',
        :'serial_number' => :'serialNumber',
        :'mac_address' => :'macAddress',
        :'device_type' => :'deviceType',
        :'active' => :'active',
        :'disabled' => :'disabled',
        :'username' => :'username',
        :'connection_state' => :'connectionState',
        :'status' => :'status',
        :'error' => :'error',
        :'last_activity_time' => :'lastActivityTime',
        :'rssi' => :'rssi',
        :'firmware_version' => :'firmwareVersion',
        :'is_latest_firmware' => :'isLatestFirmware',
        :'active_profile_id' => :'activeProfileId',
        :'active_profile_step_id' => :'activeProfileStepId',
        :'active_profile_session' => :'activeProfileSession',
        :'profile_sessions' => :'profileSessions',
        :'beta_updates' => :'betaUpdates',
        :'bluetooth_enabled' => :'bluetoothEnabled',
        :'graph_zoom_level' => :'graphZoomLevel',
        :'temperature' => :'temperature',
        :'target_temperature' => :'targetTemperature',
        :'total_run_time' => :'totalRunTime',
        :'cooling_enabled' => :'coolingEnabled',
        :'cooling_run_time' => :'coolingRunTime',
        :'cooling_starts' => :'coolingStarts',
        :'heating_enabled' => :'heatingEnabled',
        :'heating_run_time' => :'heatingRunTime',
        :'heating_starts' => :'heatingStarts',
        :'heating_utilisation' => :'heatingUtilisation',
        :'high_temp_alarm' => :'highTempAlarm',
        :'low_temp_alarm' => :'lowTempAlarm',
        :'ntc_beta' => :'ntcBeta',
        :'ntc_ref_resistance' => :'ntcRefResistance',
        :'ntc_ref_temperature' => :'ntcRefTemperature',
        :'pid_cycle_time' => :'pidCycleTime',
        :'pid_enabled' => :'pidEnabled',
        :'pid_proportional' => :'pidProportional',
        :'pid_integral' => :'pidIntegral',
        :'pid_derivative' => :'pidDerivative',
        :'sensor_differential' => :'sensorDifferential',
        :'sensor_timeout' => :'sensorTimeout',
        :'show_graph' => :'showGraph',
        :'sounds_enabled' => :'soundsEnabled',
        :'temp_unit' => :'tempUnit',
        :'use_internal_sensor' => :'useInternalSensor',
        :'control_device_type' => :'controlDeviceType',
        :'control_device_mac_address' => :'controlDeviceMacAddress',
        :'control_device_temperature' => :'controlDeviceTemperature',
        :'customer_use' => :'customerUse',
        :'telemetry_frequency' => :'telemetryFrequency',
        :'compressor_delay' => :'compressorDelay',
        :'mode_switch_delay' => :'modeSwitchDelay',
        :'cooling_hysteresis' => :'coolingHysteresis',
        :'heating_hysteresis' => :'heatingHysteresis',
        :'telemetry' => :'telemetry',
        :'min_target_temperature' => :'minTargetTemperature',
        :'max_target_temperature' => :'maxTargetTemperature'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'deleted' => :'Boolean',
        :'created_on' => :'Time',
        :'created_by' => :'String',
        :'modified_on' => :'Time',
        :'modified_by' => :'String',
        :'name' => :'String',
        :'serial_number' => :'String',
        :'mac_address' => :'String',
        :'device_type' => :'DeviceTypes',
        :'active' => :'Boolean',
        :'disabled' => :'Boolean',
        :'username' => :'String',
        :'connection_state' => :'String',
        :'status' => :'String',
        :'error' => :'String',
        :'last_activity_time' => :'Time',
        :'rssi' => :'Float',
        :'firmware_version' => :'String',
        :'is_latest_firmware' => :'Boolean',
        :'active_profile_id' => :'String',
        :'active_profile_step_id' => :'String',
        :'active_profile_session' => :'ProfileSessionStatusModel',
        :'profile_sessions' => :'Array<ProfileSessionModel>',
        :'beta_updates' => :'Boolean',
        :'bluetooth_enabled' => :'Boolean',
        :'graph_zoom_level' => :'Float',
        :'temperature' => :'Float',
        :'target_temperature' => :'Float',
        :'total_run_time' => :'Float',
        :'cooling_enabled' => :'Boolean',
        :'cooling_run_time' => :'Float',
        :'cooling_starts' => :'Float',
        :'heating_enabled' => :'Boolean',
        :'heating_run_time' => :'Float',
        :'heating_starts' => :'Float',
        :'heating_utilisation' => :'Float',
        :'high_temp_alarm' => :'Float',
        :'low_temp_alarm' => :'Float',
        :'ntc_beta' => :'Float',
        :'ntc_ref_resistance' => :'Float',
        :'ntc_ref_temperature' => :'Float',
        :'pid_cycle_time' => :'Float',
        :'pid_enabled' => :'Boolean',
        :'pid_proportional' => :'Float',
        :'pid_integral' => :'Float',
        :'pid_derivative' => :'Float',
        :'sensor_differential' => :'Float',
        :'sensor_timeout' => :'Float',
        :'show_graph' => :'Boolean',
        :'sounds_enabled' => :'Boolean',
        :'temp_unit' => :'String',
        :'use_internal_sensor' => :'Boolean',
        :'control_device_type' => :'String',
        :'control_device_mac_address' => :'String',
        :'control_device_temperature' => :'Float',
        :'customer_use' => :'String',
        :'telemetry_frequency' => :'Integer',
        :'compressor_delay' => :'Float',
        :'mode_switch_delay' => :'Float',
        :'cooling_hysteresis' => :'Float',
        :'heating_hysteresis' => :'Float',
        :'telemetry' => :'Array<TemperatureControllerTelemetryModel>',
        :'min_target_temperature' => :'Float',
        :'max_target_temperature' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'serial_number',
        :'username',
        :'connection_state',
        :'status',
        :'error',
        :'last_activity_time',
        :'firmware_version',
        :'active_profile_id',
        :'active_profile_step_id',
        :'profile_sessions',
        :'target_temperature',
        :'temp_unit',
        :'control_device_type',
        :'control_device_mac_address',
        :'control_device_temperature',
        :'telemetry',
        :'min_target_temperature',
        :'max_target_temperature'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::TemperatureControllerModel` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::TemperatureControllerModel`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'deleted')
        self.deleted = attributes[:'deleted']
      end

      if attributes.key?(:'created_on')
        self.created_on = attributes[:'created_on']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'modified_on')
        self.modified_on = attributes[:'modified_on']
      end

      if attributes.key?(:'modified_by')
        self.modified_by = attributes[:'modified_by']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'serial_number')
        self.serial_number = attributes[:'serial_number']
      end

      if attributes.key?(:'mac_address')
        self.mac_address = attributes[:'mac_address']
      else
        self.mac_address = nil
      end

      if attributes.key?(:'device_type')
        self.device_type = attributes[:'device_type']
      else
        self.device_type = nil
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.key?(:'disabled')
        self.disabled = attributes[:'disabled']
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end

      if attributes.key?(:'connection_state')
        self.connection_state = attributes[:'connection_state']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'error')
        self.error = attributes[:'error']
      end

      if attributes.key?(:'last_activity_time')
        self.last_activity_time = attributes[:'last_activity_time']
      end

      if attributes.key?(:'rssi')
        self.rssi = attributes[:'rssi']
      end

      if attributes.key?(:'firmware_version')
        self.firmware_version = attributes[:'firmware_version']
      end

      if attributes.key?(:'is_latest_firmware')
        self.is_latest_firmware = attributes[:'is_latest_firmware']
      end

      if attributes.key?(:'active_profile_id')
        self.active_profile_id = attributes[:'active_profile_id']
      end

      if attributes.key?(:'active_profile_step_id')
        self.active_profile_step_id = attributes[:'active_profile_step_id']
      end

      if attributes.key?(:'active_profile_session')
        self.active_profile_session = attributes[:'active_profile_session']
      end

      if attributes.key?(:'profile_sessions')
        if (value = attributes[:'profile_sessions']).is_a?(Array)
          self.profile_sessions = value
        end
      end

      if attributes.key?(:'beta_updates')
        self.beta_updates = attributes[:'beta_updates']
      end

      if attributes.key?(:'bluetooth_enabled')
        self.bluetooth_enabled = attributes[:'bluetooth_enabled']
      end

      if attributes.key?(:'graph_zoom_level')
        self.graph_zoom_level = attributes[:'graph_zoom_level']
      end

      if attributes.key?(:'temperature')
        self.temperature = attributes[:'temperature']
      end

      if attributes.key?(:'target_temperature')
        self.target_temperature = attributes[:'target_temperature']
      end

      if attributes.key?(:'total_run_time')
        self.total_run_time = attributes[:'total_run_time']
      end

      if attributes.key?(:'cooling_enabled')
        self.cooling_enabled = attributes[:'cooling_enabled']
      end

      if attributes.key?(:'cooling_run_time')
        self.cooling_run_time = attributes[:'cooling_run_time']
      end

      if attributes.key?(:'cooling_starts')
        self.cooling_starts = attributes[:'cooling_starts']
      end

      if attributes.key?(:'heating_enabled')
        self.heating_enabled = attributes[:'heating_enabled']
      end

      if attributes.key?(:'heating_run_time')
        self.heating_run_time = attributes[:'heating_run_time']
      end

      if attributes.key?(:'heating_starts')
        self.heating_starts = attributes[:'heating_starts']
      end

      if attributes.key?(:'heating_utilisation')
        self.heating_utilisation = attributes[:'heating_utilisation']
      end

      if attributes.key?(:'high_temp_alarm')
        self.high_temp_alarm = attributes[:'high_temp_alarm']
      end

      if attributes.key?(:'low_temp_alarm')
        self.low_temp_alarm = attributes[:'low_temp_alarm']
      end

      if attributes.key?(:'ntc_beta')
        self.ntc_beta = attributes[:'ntc_beta']
      end

      if attributes.key?(:'ntc_ref_resistance')
        self.ntc_ref_resistance = attributes[:'ntc_ref_resistance']
      end

      if attributes.key?(:'ntc_ref_temperature')
        self.ntc_ref_temperature = attributes[:'ntc_ref_temperature']
      end

      if attributes.key?(:'pid_cycle_time')
        self.pid_cycle_time = attributes[:'pid_cycle_time']
      end

      if attributes.key?(:'pid_enabled')
        self.pid_enabled = attributes[:'pid_enabled']
      end

      if attributes.key?(:'pid_proportional')
        self.pid_proportional = attributes[:'pid_proportional']
      end

      if attributes.key?(:'pid_integral')
        self.pid_integral = attributes[:'pid_integral']
      end

      if attributes.key?(:'pid_derivative')
        self.pid_derivative = attributes[:'pid_derivative']
      end

      if attributes.key?(:'sensor_differential')
        self.sensor_differential = attributes[:'sensor_differential']
      end

      if attributes.key?(:'sensor_timeout')
        self.sensor_timeout = attributes[:'sensor_timeout']
      end

      if attributes.key?(:'show_graph')
        self.show_graph = attributes[:'show_graph']
      end

      if attributes.key?(:'sounds_enabled')
        self.sounds_enabled = attributes[:'sounds_enabled']
      end

      if attributes.key?(:'temp_unit')
        self.temp_unit = attributes[:'temp_unit']
      end

      if attributes.key?(:'use_internal_sensor')
        self.use_internal_sensor = attributes[:'use_internal_sensor']
      end

      if attributes.key?(:'control_device_type')
        self.control_device_type = attributes[:'control_device_type']
      end

      if attributes.key?(:'control_device_mac_address')
        self.control_device_mac_address = attributes[:'control_device_mac_address']
      end

      if attributes.key?(:'control_device_temperature')
        self.control_device_temperature = attributes[:'control_device_temperature']
      end

      if attributes.key?(:'customer_use')
        self.customer_use = attributes[:'customer_use']
      else
        self.customer_use = nil
      end

      if attributes.key?(:'telemetry_frequency')
        self.telemetry_frequency = attributes[:'telemetry_frequency']
      end

      if attributes.key?(:'compressor_delay')
        self.compressor_delay = attributes[:'compressor_delay']
      end

      if attributes.key?(:'mode_switch_delay')
        self.mode_switch_delay = attributes[:'mode_switch_delay']
      end

      if attributes.key?(:'cooling_hysteresis')
        self.cooling_hysteresis = attributes[:'cooling_hysteresis']
      end

      if attributes.key?(:'heating_hysteresis')
        self.heating_hysteresis = attributes[:'heating_hysteresis']
      end

      if attributes.key?(:'telemetry')
        if (value = attributes[:'telemetry']).is_a?(Array)
          self.telemetry = value
        end
      end

      if attributes.key?(:'min_target_temperature')
        self.min_target_temperature = attributes[:'min_target_temperature']
      end

      if attributes.key?(:'max_target_temperature')
        self.max_target_temperature = attributes[:'max_target_temperature']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length < 1
        invalid_properties.push('invalid value for "name", the character length must be great than or equal to 1.')
      end

      if @mac_address.nil?
        invalid_properties.push('invalid value for "mac_address", mac_address cannot be nil.')
      end

      if @mac_address.to_s.length < 1
        invalid_properties.push('invalid value for "mac_address", the character length must be great than or equal to 1.')
      end

      if @device_type.nil?
        invalid_properties.push('invalid value for "device_type", device_type cannot be nil.')
      end

      if @customer_use.nil?
        invalid_properties.push('invalid value for "customer_use", customer_use cannot be nil.')
      end

      if @customer_use.to_s.length < 1
        invalid_properties.push('invalid value for "customer_use", the character length must be great than or equal to 1.')
      end

      if !@telemetry_frequency.nil? && @telemetry_frequency > 14440
        invalid_properties.push('invalid value for "telemetry_frequency", must be smaller than or equal to 14440.')
      end

      if !@telemetry_frequency.nil? && @telemetry_frequency < 1
        invalid_properties.push('invalid value for "telemetry_frequency", must be greater than or equal to 1.')
      end

      if !@compressor_delay.nil? && @compressor_delay > 10
        invalid_properties.push('invalid value for "compressor_delay", must be smaller than or equal to 10.')
      end

      if !@compressor_delay.nil? && @compressor_delay < 0
        invalid_properties.push('invalid value for "compressor_delay", must be greater than or equal to 0.')
      end

      if !@mode_switch_delay.nil? && @mode_switch_delay > 30
        invalid_properties.push('invalid value for "mode_switch_delay", must be smaller than or equal to 30.')
      end

      if !@mode_switch_delay.nil? && @mode_switch_delay < 0
        invalid_properties.push('invalid value for "mode_switch_delay", must be greater than or equal to 0.')
      end

      if !@cooling_hysteresis.nil? && @cooling_hysteresis > 10
        invalid_properties.push('invalid value for "cooling_hysteresis", must be smaller than or equal to 10.')
      end

      if !@cooling_hysteresis.nil? && @cooling_hysteresis < 0
        invalid_properties.push('invalid value for "cooling_hysteresis", must be greater than or equal to 0.')
      end

      if !@heating_hysteresis.nil? && @heating_hysteresis > 10
        invalid_properties.push('invalid value for "heating_hysteresis", must be smaller than or equal to 10.')
      end

      if !@heating_hysteresis.nil? && @heating_hysteresis < 0
        invalid_properties.push('invalid value for "heating_hysteresis", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @name.nil?
      return false if @name.to_s.length < 1
      return false if @mac_address.nil?
      return false if @mac_address.to_s.length < 1
      return false if @device_type.nil?
      return false if @customer_use.nil?
      return false if @customer_use.to_s.length < 1
      return false if !@telemetry_frequency.nil? && @telemetry_frequency > 14440
      return false if !@telemetry_frequency.nil? && @telemetry_frequency < 1
      return false if !@compressor_delay.nil? && @compressor_delay > 10
      return false if !@compressor_delay.nil? && @compressor_delay < 0
      return false if !@mode_switch_delay.nil? && @mode_switch_delay > 30
      return false if !@mode_switch_delay.nil? && @mode_switch_delay < 0
      return false if !@cooling_hysteresis.nil? && @cooling_hysteresis > 10
      return false if !@cooling_hysteresis.nil? && @cooling_hysteresis < 0
      return false if !@heating_hysteresis.nil? && @heating_hysteresis > 10
      return false if !@heating_hysteresis.nil? && @heating_hysteresis < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length < 1
        fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 1.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] mac_address Value to be assigned
    def mac_address=(mac_address)
      if mac_address.nil?
        fail ArgumentError, 'mac_address cannot be nil'
      end

      if mac_address.to_s.length < 1
        fail ArgumentError, 'invalid value for "mac_address", the character length must be great than or equal to 1.'
      end

      @mac_address = mac_address
    end

    # Custom attribute writer method with validation
    # @param [Object] device_type Value to be assigned
    def device_type=(device_type)
      if device_type.nil?
        fail ArgumentError, 'device_type cannot be nil'
      end

      @device_type = device_type
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_use Value to be assigned
    def customer_use=(customer_use)
      if customer_use.nil?
        fail ArgumentError, 'customer_use cannot be nil'
      end

      if customer_use.to_s.length < 1
        fail ArgumentError, 'invalid value for "customer_use", the character length must be great than or equal to 1.'
      end

      @customer_use = customer_use
    end

    # Custom attribute writer method with validation
    # @param [Object] telemetry_frequency Value to be assigned
    def telemetry_frequency=(telemetry_frequency)
      if telemetry_frequency.nil?
        fail ArgumentError, 'telemetry_frequency cannot be nil'
      end

      if telemetry_frequency > 14440
        fail ArgumentError, 'invalid value for "telemetry_frequency", must be smaller than or equal to 14440.'
      end

      if telemetry_frequency < 1
        fail ArgumentError, 'invalid value for "telemetry_frequency", must be greater than or equal to 1.'
      end

      @telemetry_frequency = telemetry_frequency
    end

    # Custom attribute writer method with validation
    # @param [Object] compressor_delay Value to be assigned
    def compressor_delay=(compressor_delay)
      if compressor_delay.nil?
        fail ArgumentError, 'compressor_delay cannot be nil'
      end

      if compressor_delay > 10
        fail ArgumentError, 'invalid value for "compressor_delay", must be smaller than or equal to 10.'
      end

      if compressor_delay < 0
        fail ArgumentError, 'invalid value for "compressor_delay", must be greater than or equal to 0.'
      end

      @compressor_delay = compressor_delay
    end

    # Custom attribute writer method with validation
    # @param [Object] mode_switch_delay Value to be assigned
    def mode_switch_delay=(mode_switch_delay)
      if mode_switch_delay.nil?
        fail ArgumentError, 'mode_switch_delay cannot be nil'
      end

      if mode_switch_delay > 30
        fail ArgumentError, 'invalid value for "mode_switch_delay", must be smaller than or equal to 30.'
      end

      if mode_switch_delay < 0
        fail ArgumentError, 'invalid value for "mode_switch_delay", must be greater than or equal to 0.'
      end

      @mode_switch_delay = mode_switch_delay
    end

    # Custom attribute writer method with validation
    # @param [Object] cooling_hysteresis Value to be assigned
    def cooling_hysteresis=(cooling_hysteresis)
      if cooling_hysteresis.nil?
        fail ArgumentError, 'cooling_hysteresis cannot be nil'
      end

      if cooling_hysteresis > 10
        fail ArgumentError, 'invalid value for "cooling_hysteresis", must be smaller than or equal to 10.'
      end

      if cooling_hysteresis < 0
        fail ArgumentError, 'invalid value for "cooling_hysteresis", must be greater than or equal to 0.'
      end

      @cooling_hysteresis = cooling_hysteresis
    end

    # Custom attribute writer method with validation
    # @param [Object] heating_hysteresis Value to be assigned
    def heating_hysteresis=(heating_hysteresis)
      if heating_hysteresis.nil?
        fail ArgumentError, 'heating_hysteresis cannot be nil'
      end

      if heating_hysteresis > 10
        fail ArgumentError, 'invalid value for "heating_hysteresis", must be smaller than or equal to 10.'
      end

      if heating_hysteresis < 0
        fail ArgumentError, 'invalid value for "heating_hysteresis", must be greater than or equal to 0.'
      end

      @heating_hysteresis = heating_hysteresis
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          deleted == o.deleted &&
          created_on == o.created_on &&
          created_by == o.created_by &&
          modified_on == o.modified_on &&
          modified_by == o.modified_by &&
          name == o.name &&
          serial_number == o.serial_number &&
          mac_address == o.mac_address &&
          device_type == o.device_type &&
          active == o.active &&
          disabled == o.disabled &&
          username == o.username &&
          connection_state == o.connection_state &&
          status == o.status &&
          error == o.error &&
          last_activity_time == o.last_activity_time &&
          rssi == o.rssi &&
          firmware_version == o.firmware_version &&
          is_latest_firmware == o.is_latest_firmware &&
          active_profile_id == o.active_profile_id &&
          active_profile_step_id == o.active_profile_step_id &&
          active_profile_session == o.active_profile_session &&
          profile_sessions == o.profile_sessions &&
          beta_updates == o.beta_updates &&
          bluetooth_enabled == o.bluetooth_enabled &&
          graph_zoom_level == o.graph_zoom_level &&
          temperature == o.temperature &&
          target_temperature == o.target_temperature &&
          total_run_time == o.total_run_time &&
          cooling_enabled == o.cooling_enabled &&
          cooling_run_time == o.cooling_run_time &&
          cooling_starts == o.cooling_starts &&
          heating_enabled == o.heating_enabled &&
          heating_run_time == o.heating_run_time &&
          heating_starts == o.heating_starts &&
          heating_utilisation == o.heating_utilisation &&
          high_temp_alarm == o.high_temp_alarm &&
          low_temp_alarm == o.low_temp_alarm &&
          ntc_beta == o.ntc_beta &&
          ntc_ref_resistance == o.ntc_ref_resistance &&
          ntc_ref_temperature == o.ntc_ref_temperature &&
          pid_cycle_time == o.pid_cycle_time &&
          pid_enabled == o.pid_enabled &&
          pid_proportional == o.pid_proportional &&
          pid_integral == o.pid_integral &&
          pid_derivative == o.pid_derivative &&
          sensor_differential == o.sensor_differential &&
          sensor_timeout == o.sensor_timeout &&
          show_graph == o.show_graph &&
          sounds_enabled == o.sounds_enabled &&
          temp_unit == o.temp_unit &&
          use_internal_sensor == o.use_internal_sensor &&
          control_device_type == o.control_device_type &&
          control_device_mac_address == o.control_device_mac_address &&
          control_device_temperature == o.control_device_temperature &&
          customer_use == o.customer_use &&
          telemetry_frequency == o.telemetry_frequency &&
          compressor_delay == o.compressor_delay &&
          mode_switch_delay == o.mode_switch_delay &&
          cooling_hysteresis == o.cooling_hysteresis &&
          heating_hysteresis == o.heating_hysteresis &&
          telemetry == o.telemetry &&
          min_target_temperature == o.min_target_temperature &&
          max_target_temperature == o.max_target_temperature
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, deleted, created_on, created_by, modified_on, modified_by, name, serial_number, mac_address, device_type, active, disabled, username, connection_state, status, error, last_activity_time, rssi, firmware_version, is_latest_firmware, active_profile_id, active_profile_step_id, active_profile_session, profile_sessions, beta_updates, bluetooth_enabled, graph_zoom_level, temperature, target_temperature, total_run_time, cooling_enabled, cooling_run_time, cooling_starts, heating_enabled, heating_run_time, heating_starts, heating_utilisation, high_temp_alarm, low_temp_alarm, ntc_beta, ntc_ref_resistance, ntc_ref_temperature, pid_cycle_time, pid_enabled, pid_proportional, pid_integral, pid_derivative, sensor_differential, sensor_timeout, show_graph, sounds_enabled, temp_unit, use_internal_sensor, control_device_type, control_device_mac_address, control_device_temperature, customer_use, telemetry_frequency, compressor_delay, mode_switch_delay, cooling_hysteresis, heating_hysteresis, telemetry, min_target_temperature, max_target_temperature].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
