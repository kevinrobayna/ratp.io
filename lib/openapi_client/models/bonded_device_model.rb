=begin
#RAPT API

#Really Awesome Product Technology

The version of the OpenAPI document: v1
Contact: beer@kegland.com.au
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module OpenapiClient
  class BondedDeviceModel
    attr_accessor :id

    attr_accessor :deleted

    attr_accessor :created_on

    attr_accessor :created_by

    attr_accessor :modified_on

    attr_accessor :modified_by

    attr_accessor :name

    attr_accessor :serial_number

    attr_accessor :mac_address

    attr_accessor :device_type

    attr_accessor :active

    attr_accessor :disabled

    attr_accessor :username

    attr_accessor :connection_state

    attr_accessor :status

    attr_accessor :error

    attr_accessor :last_activity_time

    attr_accessor :rssi

    attr_accessor :firmware_version

    attr_accessor :is_latest_firmware

    attr_accessor :active_profile_id

    attr_accessor :active_profile_step_id

    attr_accessor :active_profile_session

    attr_accessor :telemetry

    attr_accessor :temperature

    attr_accessor :battery

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'deleted' => :'deleted',
        :'created_on' => :'createdOn',
        :'created_by' => :'createdBy',
        :'modified_on' => :'modifiedOn',
        :'modified_by' => :'modifiedBy',
        :'name' => :'name',
        :'serial_number' => :'serialNumber',
        :'mac_address' => :'macAddress',
        :'device_type' => :'deviceType',
        :'active' => :'active',
        :'disabled' => :'disabled',
        :'username' => :'username',
        :'connection_state' => :'connectionState',
        :'status' => :'status',
        :'error' => :'error',
        :'last_activity_time' => :'lastActivityTime',
        :'rssi' => :'rssi',
        :'firmware_version' => :'firmwareVersion',
        :'is_latest_firmware' => :'isLatestFirmware',
        :'active_profile_id' => :'activeProfileId',
        :'active_profile_step_id' => :'activeProfileStepId',
        :'active_profile_session' => :'activeProfileSession',
        :'telemetry' => :'telemetry',
        :'temperature' => :'temperature',
        :'battery' => :'battery'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'deleted' => :'Boolean',
        :'created_on' => :'Time',
        :'created_by' => :'String',
        :'modified_on' => :'Time',
        :'modified_by' => :'String',
        :'name' => :'String',
        :'serial_number' => :'String',
        :'mac_address' => :'String',
        :'device_type' => :'DeviceTypes',
        :'active' => :'Boolean',
        :'disabled' => :'Boolean',
        :'username' => :'String',
        :'connection_state' => :'String',
        :'status' => :'String',
        :'error' => :'String',
        :'last_activity_time' => :'Time',
        :'rssi' => :'Float',
        :'firmware_version' => :'String',
        :'is_latest_firmware' => :'Boolean',
        :'active_profile_id' => :'String',
        :'active_profile_step_id' => :'String',
        :'active_profile_session' => :'ProfileSessionStatusModel',
        :'telemetry' => :'Array<BondedDeviceTelemetryModel>',
        :'temperature' => :'Float',
        :'battery' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'serial_number',
        :'username',
        :'connection_state',
        :'status',
        :'error',
        :'last_activity_time',
        :'firmware_version',
        :'active_profile_id',
        :'active_profile_step_id',
        :'telemetry',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::BondedDeviceModel` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::BondedDeviceModel`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'deleted')
        self.deleted = attributes[:'deleted']
      end

      if attributes.key?(:'created_on')
        self.created_on = attributes[:'created_on']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'modified_on')
        self.modified_on = attributes[:'modified_on']
      end

      if attributes.key?(:'modified_by')
        self.modified_by = attributes[:'modified_by']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'serial_number')
        self.serial_number = attributes[:'serial_number']
      end

      if attributes.key?(:'mac_address')
        self.mac_address = attributes[:'mac_address']
      else
        self.mac_address = nil
      end

      if attributes.key?(:'device_type')
        self.device_type = attributes[:'device_type']
      else
        self.device_type = nil
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.key?(:'disabled')
        self.disabled = attributes[:'disabled']
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end

      if attributes.key?(:'connection_state')
        self.connection_state = attributes[:'connection_state']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'error')
        self.error = attributes[:'error']
      end

      if attributes.key?(:'last_activity_time')
        self.last_activity_time = attributes[:'last_activity_time']
      end

      if attributes.key?(:'rssi')
        self.rssi = attributes[:'rssi']
      end

      if attributes.key?(:'firmware_version')
        self.firmware_version = attributes[:'firmware_version']
      end

      if attributes.key?(:'is_latest_firmware')
        self.is_latest_firmware = attributes[:'is_latest_firmware']
      end

      if attributes.key?(:'active_profile_id')
        self.active_profile_id = attributes[:'active_profile_id']
      end

      if attributes.key?(:'active_profile_step_id')
        self.active_profile_step_id = attributes[:'active_profile_step_id']
      end

      if attributes.key?(:'active_profile_session')
        self.active_profile_session = attributes[:'active_profile_session']
      end

      if attributes.key?(:'telemetry')
        if (value = attributes[:'telemetry']).is_a?(Array)
          self.telemetry = value
        end
      end

      if attributes.key?(:'temperature')
        self.temperature = attributes[:'temperature']
      end

      if attributes.key?(:'battery')
        self.battery = attributes[:'battery']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length < 1
        invalid_properties.push('invalid value for "name", the character length must be great than or equal to 1.')
      end

      if @mac_address.nil?
        invalid_properties.push('invalid value for "mac_address", mac_address cannot be nil.')
      end

      if @mac_address.to_s.length < 1
        invalid_properties.push('invalid value for "mac_address", the character length must be great than or equal to 1.')
      end

      if @device_type.nil?
        invalid_properties.push('invalid value for "device_type", device_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @name.nil?
      return false if @name.to_s.length < 1
      return false if @mac_address.nil?
      return false if @mac_address.to_s.length < 1
      return false if @device_type.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length < 1
        fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 1.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] mac_address Value to be assigned
    def mac_address=(mac_address)
      if mac_address.nil?
        fail ArgumentError, 'mac_address cannot be nil'
      end

      if mac_address.to_s.length < 1
        fail ArgumentError, 'invalid value for "mac_address", the character length must be great than or equal to 1.'
      end

      @mac_address = mac_address
    end

    # Custom attribute writer method with validation
    # @param [Object] device_type Value to be assigned
    def device_type=(device_type)
      if device_type.nil?
        fail ArgumentError, 'device_type cannot be nil'
      end

      @device_type = device_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          deleted == o.deleted &&
          created_on == o.created_on &&
          created_by == o.created_by &&
          modified_on == o.modified_on &&
          modified_by == o.modified_by &&
          name == o.name &&
          serial_number == o.serial_number &&
          mac_address == o.mac_address &&
          device_type == o.device_type &&
          active == o.active &&
          disabled == o.disabled &&
          username == o.username &&
          connection_state == o.connection_state &&
          status == o.status &&
          error == o.error &&
          last_activity_time == o.last_activity_time &&
          rssi == o.rssi &&
          firmware_version == o.firmware_version &&
          is_latest_firmware == o.is_latest_firmware &&
          active_profile_id == o.active_profile_id &&
          active_profile_step_id == o.active_profile_step_id &&
          active_profile_session == o.active_profile_session &&
          telemetry == o.telemetry &&
          temperature == o.temperature &&
          battery == o.battery
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, deleted, created_on, created_by, modified_on, modified_by, name, serial_number, mac_address, device_type, active, disabled, username, connection_state, status, error, last_activity_time, rssi, firmware_version, is_latest_firmware, active_profile_id, active_profile_step_id, active_profile_session, telemetry, temperature, battery].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
